<#@ template debug="false" hostspecific="false" language="C#"
#><#@ output extension=".cs"
#><#@ Assembly name="System.Core"
#><#@ Assembly Name="System.Xml"
#><#@ Assembly name="Microsoft.SqlServer.ConnectionInfo"
#><#@ Assembly name="Microsoft.SqlServer.Smo"
#><#@ Assembly Name="Microsoft.SqlServer.Management.Sdk.Sfc"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="Microsoft.SqlServer.Management.Smo"
#><#string EntityName = "Person";
	string EntityNamePlural = "People";
	string DALModelsNamespace = "AW.DAL.Models";
	string DALRepositoriesNamespace = "AW.DAL.Repositories";
	string EFNamespace = "AW.EF";
	Server server = new Server("Dell7110");
	Database database = new Database(server, "AdventureWorks2012");
	Table table = new Table(database, "Person", "Person");
	table.Refresh();
#>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= DALRepositoriesNamespace #> {
    public class EF<#= EntityName #>Mapper {
        #region Map EF to DAL

        public static IEnumerable<<#= DALModelsNamespace #>.<#= EntityName #>> MapAllEFtoDAL(IEnumerable<<#= EFNamespace #>.<#= EntityName #>> ef<#= EntityNamePlural #>) {
            List<<#= DALModelsNamespace #>.<#= EntityName #>> dal<#= EntityNamePlural #> = new List<<#= DALModelsNamespace #>.<#= EntityName #>>();

            foreach (<#= EFNamespace #>.<#= EntityName #> ef<#= EntityName #> in ef<#= EntityNamePlural #>) {
                dal<#= EntityNamePlural #>.Add(EF<#= EntityName #>Mapper.MapOneEFtoDAL(ef<#= EntityName #>));
            }

            return dal<#= EntityNamePlural #>;
        }

        public static <#= DALModelsNamespace #>.<#= EntityName #> MapOneEFtoDAL(<#= EFNamespace #>.<#= EntityName #> ef<#= EntityName #>) {
            <#= DALModelsNamespace #>.<#= EntityName #> dal<#= EntityName #> = new <#= DALModelsNamespace #>.<#= EntityName #>();

<#
PushIndent("\t\t\t");
foreach (Column column in table.Columns)
{
	//if (column.DataType.ToString() != "uniqueidentifier" && column.DataType.ToString() != "NameStyle") {
		WriteLine(string.Format(@"dal{0}.{1} = ef{2}.{3}{4};", EntityName, column.Name,  EntityName, column.Name, SqlTypeToString(column.DataType.ToString(),column.Name,column.Nullable)));
	//}
}      
WriteLine(string.Format(@"dal{0}.CrudState = {1}.CrudState.Unchanged;", EntityName, DALModelsNamespace));
PopIndent();
#>

            return dal<#= EntityName #>;
        }

        #endregion

        #region Map DAL to EF

        public static <#= EFNamespace #>.<#= EntityName #> MapOneDALtoEF(<#= DALModelsNamespace #>.<#= EntityName #> dal<#= EntityName #>) {
            <#= EFNamespace #>.<#= EntityName #> ef<#= EntityName #> = new <#= EFNamespace #>.<#= EntityName #>();

<#
PushIndent("\t\t\t");
foreach (Column column in table.Columns)
{
	//if (column.DataType.ToString() != "uniqueidentifier" && column.DataType.ToString() != "NameStyle") {
		WriteLine(string.Format(@"ef{0}.{1} = {2};", EntityName, column.Name,  SqlTypeParsedToString(column.DataType.ToString(), EntityName, column.Name, "dal")));
	//}
}      
PopIndent();
#>

            return ef<#= EntityName #>;
        }

        #endregion
    }
}
<#+
    private string SqlTypeToString(string sqlType, string columnName, bool isNullable) {
        string toString = string.Empty;

        switch (sqlType) {
            case "int":
                if (columnName != "BusinessEntityID") {
                    toString = ".ToString()";
                }
                break;
            case "bit":
                toString = ".ToString()";
                break;
            case "NameStyle":
                toString = ".ToString()";
                break;
            case "datetime":
                toString = isNullable ? ".ToString()" : ".ToShortDateString()";
                break;
            case "money":
                toString = ".ToString()";
                break;
            case "uniqueidentifier":
                toString = ".ToString()";
                break;
            default:
                break;
        }

        return toString;
    }

    private string SqlTypeParsedToString(string sqlType, string entityName, string columnName, string prefix) {
        string parsedToString = string.Empty;

        switch (sqlType) {
            case "int":
                if (columnName != "BusinessEntityID") {
                    parsedToString = string.Format("int.Parse({0}{1}.{2})", prefix, entityName, columnName);
                }
                else {
                    parsedToString = string.Format("{0}{1}.{2}", prefix, entityName, columnName);
                }
                break;
            case "bit":
                parsedToString = string.Format("bool.Parse({0}{1}.{2})", prefix, entityName, columnName);
                break;
            case "NameStyle":
                parsedToString = string.Format("bool.Parse({0}{1}.{2})", prefix, entityName, columnName);
                break;
            case "datetime":
                parsedToString = string.Format("DateTime.Parse({0}{1}.{2})", prefix, entityName, columnName);
                break;
            case "money":
                parsedToString = string.Format("decimal.Parse({0}{1}.{2})", prefix, entityName, columnName);
                break;
            case "uniqueidentifier":
                parsedToString = string.Format("Guid.Parse({0}{1}.{2})", prefix, entityName, columnName);
                break;
            default:
                parsedToString = string.Format("{0}{1}.{2}", prefix, entityName, columnName);
                break;
        }

        return parsedToString;
    }
 #>