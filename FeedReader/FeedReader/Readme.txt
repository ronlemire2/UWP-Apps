1. 1/18/2016 Prism.Unity
Problem: I had an IFeedService interface with 3 implementations: ComicsService, PoliticsService and TechService. I wanted to constructor inject them into corresponding viewmodels: ComicsPageViewModel, PoliticsPageViewModel and TechPageViewModel. I could not figure out how this works with Prism.Unity i.e. each viewmodel's constructor is defined with public xxxViewModel(IFeedService feedService, INavigationService navigationService). How does Prism.Unity figure out which implementation that is set up in App.xaml.cs->ConfigureContainer() to use?
Solution: I created a BasePageViewModel:ViewModelBase class with a FeedService property. Each of the 3 ViewModels derives from BasePageViewModel. On each of the ViewModel's constructor I call the base constructor with the specific implementation of FeedService. BasePageViewModel also serves the purpose of containing all the code common to the 3 viewmodels. Dry Prinicipal.
Todo: Find out how to Prism.Unity can do this by itself.

2. 1/18/2016 UserControl 
Problem: The 3 start pages ComicsPage, PoliticsPage and TechPage contain basically the same XAML. I wanted to reuse this XAML with a FeedsUserControl (DRY Principal) but had a problem with the ListView SelectedItem property. Although SelectedItem worked fine before the UserControl it would not work in the UserControl. I did Interactivity EventBinding for the SelectionChanged event but in its code the viewmodel's SelectedFeedItem property was null. I wanted to navigate to the FeedPage passing the SelectedFeedItem.
Solution: I created a SelectionChanged event handler in the code behind where I set the viewmodel's SelectedFeedItem  to the ListView's SelectedItem property. Then when the Interactivity EventBinding code was called, the viewmodel's SelectedFeedItem had a value to pass to the FeedPage.
Todo: Find out why ListView SelectedItem property did not work in the UserControl. I had all the DependencyProperties set up correctly in the FeedsUserControl code behind.